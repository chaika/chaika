<?xml version="1.0"?>

<!-- See license.txt for terms of usage -->

<bindings id="chaikaBrowserMenuBindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:xbl="http://www.mozilla.org/xbl"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">


<binding id="browserMenu" extends="chrome://global/content/bindings/popup.xml#popup">
    <content>
        <xul:arrowscrollbox orient="vertical" flex="1" anonid="root" class="chaika-browser-menu-root">
            <xul:menu label="あぼーん" anonid="abone">
                <xul:menupopup>
                    <xul:menuitem title="%SELECTION% を名前あぼーん" anonid="abone-name"
                                  class="chaika-shown-when-text-selected chaika-need-populate" />
                    <xul:menuitem title="%SELECTION% をメールあぼーん" anonid="abone-mail"
                                  class="chaika-shown-when-text-selected chaika-need-populate" />
                    <xul:menuitem title="%SELECTION% を ID あぼーん" anonid="abone-id"
                                  class="chaika-shown-when-text-selected chaika-need-populate" />
                    <xul:menuitem title="%SELECTION% を本文あぼーん" anonid="abone-word"
                                  class="chaika-shown-when-text-selected chaika-need-populate" />
                    <xul:menuitem title="%SELECTION% を NGEx あぼーん" anonid="abone-ex"
                                  class="chaika-shown-when-text-selected chaika-need-populate" />
                    <xul:menuseparator class="chaika-shown-when-text-selected" />
                    <xul:menuitem label="あぼーんマネージャ..." anonid="open-abone-manager" />
                </xul:menupopup>
            </xul:menu>

            <xul:menu label="コピー" anonid="copy" class="chaika-shown-on-bbs">
                <xul:menupopup>
                    <xul:menuitem label="タイトル" anonid="copy-title" />
                    <xul:menuitem label="URL" anonid="copy-url" />
                    <xul:menuitem label="タイトルと URL" anonid="copy-title-url" />
                    <xul:menuitem title="タイトルと URL と %SELECTION%"
                                  anonid="copy-title-url-selection"
                                  class="chaika-shown-when-text-selected chaika-need-populate" />
                </xul:menupopup>
            </xul:menu>

            <xul:menu title="%SELECTION% を検索" anonid="search"
                      class="chaika-shown-when-text-selected chaika-shown-on-thread chaika-need-populate">
                <xul:menupopup>
                    <xul:vbox anonid="search-thread" />
                    <xul:menuseparator anonid="search-thread-sep" />
                    <xul:menuitem label="この板内を検索" anonid="search-in-board" />
                    <xul:menuitem label="このスレッド内を検索" anonid="search-in-thread" />
                </xul:menupopup>
            </xul:menu>

            <xul:menu label="履歴" anonid="history">
                <xul:menupopup style="-moz-binding:url(chrome://chaika/content/pageUtils.xml#historyMenuPopup)" />
            </xul:menu>

            <xul:menu label="スキン" anonid="skin">
                <xul:menupopup style="-moz-binding:url(chrome://chaika/content/skinMenu.xml#skinMenuPopup)" />
            </xul:menu>

            <xul:menuseparator anonid="skin-sep" />

            <xul:menuitem label="このスレッドに書き込む" anonid="write" class="chaika-shown-on-thread" />
            <xul:menuitem label="このスレッドのログを削除" anonid="delete-log" class="chaika-shown-on-thread" />

            <xul:menuseparator anonid="thread-sep" class="chaika-shown-on-thread" />

            <xul:menuitem label="chaika で開く" anonid="view-in-chaika" class="chaika-shown-on-bbs-not-chaika" />
            <xul:menuitem label="ブラウザで開く" anonid="view-in-browser" class="chaika-shown-on-chaika" />

            <xul:menuseparator anonid="view-in-sep" class="chaika-shown-on-bbs" />

            <xul:menuitem label="リンク先を chaika で開く" anonid="open-link-in-chaika" class="chaika-shown-on-bbs-link" />
            <xul:menuitem label="リンク先をブラウザで開く" anonid="open-link-in-browser" class="chaika-shown-on-bbs-link" />

            <xul:menuseparator anonid="open-link-in-sep" class="chaika-shown-on-bbs-link" />

            <xul:menuitem label="すべてのレスを表示" anonid="change-limit-all" class="chaika-shown-on-thread" />
            <xul:menuitem label="新着 50 件を表示" anonid="change-limit-l50" class="chaika-shown-on-thread" />
            <xul:menuitem label="スレッド一覧を開く" anonid="go-to-board" class="chaika-shown-on-thread" />
            <xul:menuitem label="次のスレッドを検索する" anonid="find-next-thread" class="chaika-shown-on-thread" />

            <xul:menuseparator anonid="thread-utils-sep" class="chaika-shown-on-thread" />

            <xul:menuitem title="%SELECTION% を AA として登録する"
                          anonid="register-selection-as-aa"
                          class="chaika-shown-when-text-selected chaika-need-populate" />

            <xul:menuitem label="置換マネージャ..." anonid="open-replacement-manager" />

            <xul:menuseparator anonid="extra-utils-sep" />

            <xul:menuitem label="サイドバーを表示" anonid="toggle-sidebar">
                <xul:observes element="viewChaikaSidebar" attribute="oncommand" />
                <xul:observes element="viewChaikaSidebar" attribute="checked" />
                <xul:observes element="viewChaikaSidebar" attribute="type" />
            </xul:menuitem>

            <xul:menuseparator anonid="sidebar-sep" />

            <xul:menuitem label="オプション..." anonid="open-settings"/>

            <xul:menuseparator anonid="chaika-sep" class="chaika-shown-when-flattened" />

            <children />
        </xul:arrowscrollbox>
    </content>

    <resources>
        <stylesheet src="chrome://chaika/skin/browser/browserMenu.css"/>
        <stylesheet src="chrome://chaika/skin/browser/browserMenu-icon.css"/>
    </resources>

    <handlers>
        <handler event="popupshowing" action="this._onPopupshowing(event)" />
        <handler event="popuphiding" action="this._onPopuphiding(event)" />
        <handler event="command" action="this._doCommand(event, false)"/>
        <handler event="click" button="1" action="this._doCommand(event, true)"/>
    </handlers>

    <implementation>
        <constructor><![CDATA[
            Components.utils.import("resource://chaika-modules/ChaikaCore.js", this);
            Components.utils.import("resource://chaika-modules/ChaikaBoard.js", this);
            Components.utils.import("resource://chaika-modules/ChaikaThread.js", this);
            Components.utils.import("resource://chaika-modules/ChaikaSearch.js", this);
            Components.utils.import("resource://chaika-modules/utils/URLUtils.js", this);
            Components.utils.import("resource://chaika-modules/ChaikaAboneManager.js", this);

            this.classList.add('chaika-browser-menu');
            this.classList.add('popup-internal-box');

            this._createSearchMenu();
        ]]></constructor>


        <!-- Utility Methods -->

        <!--
        /**
         * 現在開いているスレッドのURLを返す
         * @return {nsIURI} スレッドURL(chaika 形式ではない) ない場合はnullが返る
         */
        -->
        <method name="_getCurrentThreadURL">
            <body><![CDATA[
                let url = gBrowser.currentURI.spec;

                if(!this.URLUtils.isThread(url)){
                    return null;
                }else{
                    return Services.io.newURI(this.URLUtils.unchaikafy(url), null, null);
                }
            ]]></body>
        </method>


        <!--
        /**
         * 現在開いている板、または開いているスレッドが所属している板のURLを返す
         * @return {nsIURI} 板URL(chaika 形式ではない) ない場合はnullが返る
         */
        -->
        <method name="_getCurrentBoardURL">
            <body><![CDATA[
                let url = gBrowser.currentURI.spec;

                if(this.URLUtils.isThread(url)){
                    return this.ChaikaThread.getBoardURL(this._getCurrentThreadURL());
                }

                if(this.URLUtils.isBoard(url)){
                    return Services.io.newURI(this.URLUtils.unchaikafy(url), null, null);
                }

                return null;
            ]]></body>
        </method>


        <!--
        /**
         * Get the URL of the link under the cursor without Google redirection
         * @return {nsIURI}
         */
        -->
        <method name="_getLinkURL">
            <body><![CDATA[
                if(!gContextMenu || !gContextMenu.onLink){
                    return null;
                }

                let linkURL = gContextMenu.linkURL;

                // Google リダイレクタ対策
                if(linkURL.includes('google') && linkURL.includes('/url?')){
                    linkURL = decodeURIComponent(linkURL.match(/url=([^&]*)/i)[1]);
                }

                return Services.io.newURI(linkURL, null, null);
            ]]></body>
        </method>


        <method name="_createSearchMenu">
            <body><![CDATA[
                let searchMenu = document.getAnonymousElementByAttribute(this, "anonid", "search-thread");

                this.ChaikaSearch.plugins.forEach(plugin => {
                    if(!plugin.url) return;

                    let menuitem = document.createElement('menuitem');

                    menuitem.setAttribute('label', plugin.name + ' で検索');
                    menuitem.setAttribute('anonid', plugin.id);

                    searchMenu.appendChild(menuitem);
                });
            ]]></body>
        </method>


        <method name="_onPopupshowing">
            <parameter name="aEvent" />
            <body><![CDATA[
                let mm = gBrowser.selectedBrowser.messageManager;

                // フラット時の gContextMenu 初期化バグ (_onPopuphiding のコメント参照)
                // への対処のため、gContextMenu をストアしておく
                this._gContextMenu = gContextMenu;

                // 表示・非表示を制御するためのステータスを設定する
                if(!this._setStatus()){
                    this.classList.remove('chaika-status-text-selected');
                    return;
                }

                let getSelectedtext = () => {
                    return new Promise((resolve, reject) => {
                        // 応答タイムアウト設定
                        let timeoutID = setTimeout(() => {
                            clearTimeout(timeoutID);
                            reject(new Error('chaika-get-selected-text is timeout.'));
                        }, 1000);
                        
                        // frameスクリプトからの応答メッセージのlistener
                        mm.addMessageListener('chaika-get-selected-text', message => {
                            clearTimeout(timeoutID);
                            resolve(message.data);
                        });
                        
                        // frameスクリプトへ要求メッセージ送信
                        mm.sendAsyncMessage('chaika-get-selected-text');
                    });
                };

                getSelectedtext()
                .then(data => {
                    // 選択文字列を取得して保存
                    if(!data.isSelected){
                        this._selectedText = null;
                        this.classList.remove('chaika-status-text-selected');
                        return;
                    }

                    this._selectedText = data.text;
                    this.classList.add('chaika-status-text-selected');

                    // 選択文字列を表示する項目へテキストを設定する
                    let root = document.getAnonymousElementByAttribute(this, "anonid", "root");
                    let itemsToPopulate = root.querySelectorAll('.chaika-need-populate');
                    let selectedText = this._selectedText;

                    if(selectedText.length > 12){
                        selectedText = selectedText.slice(0, 12) + '…';
                    }

                    Array.from(itemsToPopulate).forEach((item) => {
                        let label = item.getAttribute('title').replace(/%SELECTION%/g, '"' + selectedText + '"');

                        item.setAttribute('label', label);
                    })
                }).catch(ex => {
                    this.ChaikaCore.logger.warning(ex);
                    this._selectedText = null;
                    this.classList.remove('chaika-status-text-selected');
                });
            ]]></body>
        </method>


        <method name="_onPopuphiding">
            <parameter name="aEvent" />
            <body><![CDATA[
                // コンテキストメニューをフラットにしている場合,
                // browserMenu.xml 内のサブメニュー (menu) を閉じた際に
                // #contentAreaContextMenu の onpopuphiding が動作してしまい,
                // gContextMenu === null となってしまう
                // これを回避するため, サブメニューを閉じた時に gContextMenu を復元する
                if(aEvent.originalTarget.nodeName === 'xul:menupopup'){
                    gContextMenu = this._gContextMenu;
                }
            ]]></body>
        </method>


        <!--
        /**
         * 現在タブの内容でメニューの表示・非表示を制御するスタータスをセットし、chaikaスレッド表示かどうかを返す。
         * @return {boolean} isOnThread の判定結果。
         */
        -->
        <method name="_setStatus">
            <body><![CDATA[
                // 選択文字列の状態についてはここでは行わない。
                // この関数が false を返した場合、呼び元の _onPopupshowing() は選択文字列の取得を行わない。
                const url = gBrowser.currentURI.spec;

                const isOnBBS = this.URLUtils.isBBS(url);
                const isOnChaika = this.URLUtils.isChaikafied(url);
                const isOnThread = this.URLUtils.isThread(url);
                const isOnBoard = this.URLUtils.isBoard(url);

                const isContextMenu = !!gContextMenu;
                const isOnBBSLink = isContextMenu && gContextMenu.onLink &&
                                    this.URLUtils.isBBS(this._getLinkURL().spec);

                let root = this;

                isOnBBS ? root.classList.add('chaika-status-on-bbs') :
                          root.classList.remove('chaika-status-on-bbs');
                isOnChaika ? root.classList.add('chaika-status-on-chaika') :
                             root.classList.remove('chaika-status-on-chaika');
                isOnThread ? root.classList.add('chaika-status-on-thread') :
                             root.classList.remove('chaika-status-on-thread');
                isOnBoard ? root.classList.add('chaika-status-on-board') :
                            root.classList.remove('chaika-status-on-board');
                isOnBBSLink ? root.classList.add('chaika-status-on-bbs-link') :
                              root.classList.remove('chaika-status-on-bbs-link');

                return isOnThread;
            ]]></body>
        </method>


        <!--
        /**
         * メニューのコマンドを実行する
         * @param {Event} aEvent
         * @param {Boolean} aMiddleClicked 中クリックかどうか
         */
        -->
        <method name="_doCommand">
            <parameter name="aEvent"/>
            <parameter name="aMiddleClicked"/>
            <body><![CDATA[
                let targetElement = aEvent.originalTarget;
                let anonymousID = targetElement.getAttribute("anonid");
                let addTab = this.ChaikaCore.pref.getBool("browser.browsermenu.open_in_new_tab");
                let disregardLimit = this.ChaikaCore.pref.getBool("browser.browsermenu.disregard_url_limit");
                let selectedText = this._selectedText;
                let singleLineText = /^[^\r\n]*/.exec(selectedText)[0];


                if(aMiddleClicked || aEvent.ctrlKey || aEvent.metaKey){
                    addTab = !addTab;
                }


                switch(anonymousID){
                    case 'abone-name':
                        this.addAbone(this.ChaikaAboneManager.ABONE_TYPE_NAME, singleLineText);
                        break;

                    case 'abone-mail':
                        this.addAbone(this.ChaikaAboneManager.ABONE_TYPE_MAIL, singleLineText);
                        break;

                    case 'abone-id':
                        this.addAbone(this.ChaikaAboneManager.ABONE_TYPE_ID, singleLineText);
                        break;

                    case 'abone-word':
                        this.addAbone(this.ChaikaAboneManager.ABONE_TYPE_WORD, singleLineText);
                        break;

                    case 'abone-ex':
                        this.addAbone(this.ChaikaAboneManager.ABONE_TYPE_EX, singleLineText);
                        break;

                    case "open-abone-manager":
                        this.openAboneManager();
                        break;

                    case 'copy-title':
                        this.copyClipBoard('%TITLE%');
                        break;

                    case 'copy-url':
                        this.copyClipBoard('%URL%');
                        break;

                    case 'copy-title-url':
                        this.copyClipBoard('%TITLE%%NEWLINE%%URL%');
                        break;

                    case 'copy-title-url-selection':
                        this.copyClipBoard('%SEL%%NEWLINE%%NEWLINE%%TITLE%%NEWLINE%%URL%');
                        break;

                    case 'search-in-board':
                        this.searchInBoard(singleLineText, addTab);
                        break;

                    case 'search-in-thread':
                        this.searchInThread(singleLineText);
                        break;

                    case "write":
                        this.write();
                        break;

                    case "delete-log":
                        this.deleteLog();
                        break;

                    case "view-in-chaika":
                        this.viewInChaika(null, addTab, disregardLimit);
                        break;

                    case "view-in-browser":
                        this.viewInBrowser(null, addTab, disregardLimit);
                        break;

                    case 'open-link-in-chaika':
                        this.viewInChaika(this._getLinkURL(), addTab, disregardLimit);
                        break;

                    case 'open-link-in-browser':
                        this.viewInBrowser(this._getLinkURL(), addTab, disregardLimit);
                        break;

                    case "change-limit-all":
                        this.changeLimit("", addTab);
                        break;

                    case "change-limit-l50":
                        this.changeLimit("l50", addTab);
                        break;

                    case "go-to-board":
                        this.goToBoard(addTab);
                        break;

                    case "find-next-thread":
                        this.findNextThread(addTab);
                        break;

                    case "register-selection-as-aa":
                        this.registerAsAA(selectedText);
                        break;

                    case 'open-replacement-manager':
                        this.openReplacementManager();
                        break;

                    case "open-settings":
                        this.openSettings();
                        break;

                    default:
                        //検索メニューかも
                        if(targetElement.parentNode.getAttribute('anonid') === 'search-thread'){
                            this.searchThread(anonymousID, singleLineText, addTab);
                        }
                }


                //メニューの項目を実行した時にサイドバー開閉コマンドが動作しないようにする
                aEvent.stopPropagation();


                //中クリックの場合にポップアップが閉じないのに対処する
                if(aMiddleClicked){
                    let contextMenu = document.getElementById('contentAreaContextMenu');
                    let menupopup = this.parentNode.getElementsByTagName('menupopup')[0];

                    //コンテキストメニューの場合
                    contextMenu.hidePopup();

                    //ツールバーボタンの場合
                    if(menupopup){
                        menupopup.hidePopup();
                    }
                }
            ]]></body>
        </method>


        <!-- Commands -->

        <!--
        /**
         * 指定された文字列をNGワードに追加する
         * @param {String} ngType NGワードの種類 ChaikaAboneManager.ABONE_TYPE_***
         * @param {String} ngWord 追加するNGワード
         * @see ChaikaAboneManager
         */
        -->
        <method name="addAbone">
            <parameter name="ngType" />
            <parameter name="ngWord" />
            <body><![CDATA[
                let shouldConfirm = this.ChaikaCore.pref.getBool('browser.browsermenu.confirm_add_abone');

                if(ngType !== this.ChaikaAboneManager.ABONE_TYPE_EX){
                    if(shouldConfirm){
                        this.openAboneManager(ngType, ngWord.toString());
                    }else{
                        this.ChaikaAboneManager[ngType].add(ngWord.toString());
                    }
                }else{
                    this.openAboneManager(ngType, {
                        target: 'post',
                        match: 'all',
                        rules: [{
                            target: 'msg',
                            query: ngWord,
                            condition: 'contains'
                        }]
                    });
                }
            ]]></body>
        </method>


        <!--
        /**
         * あぼーんマネージャを開く (引数は右クリックあぼーんで使用)
         * @param {String} [ngType] NGデータの種類
         * @param {String|NGExData} [ngWord] NGデータ
         */
        -->
        <method name="openAboneManager">
            <parameter name="ngType" />
            <parameter name="ngWord" />
            <body><![CDATA[
                this.ChaikaCore.browser.openWindow(
                    "chrome://chaika/content/settings/abone-manager.xul",
                    null,
                    ngType, ngWord
                );
            ]]></body>
        </method>


        <!--
        /**
         * クリップボードに指定された文字をコピーする
         * @param {String} template コピーする文字列の形式を指定する文字列
         * @note template で使用可能な特殊文字一覧:
         *          %TITLE%: ページタイトル, %URL%: ページURL, %SEL%: 選択文字列, %NEWLINE%: 改行
         */
        -->
        <method name="copyClipBoard">
            <parameter name="template" />
            <body><![CDATA[
                const osname = Services.appinfo.OS;
                const NEWLINE = (osname == "Darwin") ? "\n" : "\r\n";
                const removeLimit = this.ChaikaCore.pref.getBool('browser.browsermenu.remove_limit_when_copy');

                var uri = this._getCurrentThreadURL() ||
                          this._getCurrentBoardURL() ||
                          getBrowser().currentURI;

                var title;

                try{
                    title = (new this.ChaikaThread(uri)).title;
                }catch(ex){
                    try{
                        title = (new this.ChaikaBoard(uri)).getTitle();
                    }catch(ex2){
                        title = getBrowser().contentTitle;
                    }
                }

                if(removeLimit){
                    uri = Services.io.newURI("./", null, uri);
                }

                var text = template.replace(/%TITLE%/g, title)
                                   .replace(/%URL%/g, uri.spec)
                                   .replace(/%SEL%/g, this._selectedText)
                                   .replace(/%NEWLINE%/g, NEWLINE);

                var clipboard = Cc["@mozilla.org/widget/clipboardhelper;1"].getService(Ci.nsIClipboardHelper);

                clipboard.copyString(text);
            ]]></body>
        </method>


        <!--
        /**
         * 2ちゃんねる検索での検索結果を開く
         * @param {String} 検索プラグインID
         * @param {String} aTerm 検索文字列
         * @param {Boolean} aAddTab 新しいタブで開くかどうか
         */
        -->
        <method name="searchThread">
            <parameter name="aID" />
            <parameter name="aTerm" />
            <parameter name="aAddTab" />
            <body><![CDATA[
                var sidebarMode = this.ChaikaCore.pref.getBool('browser.browsermenu.find_2ch_in_sidebar');

                if(!sidebarMode){
                    let plugin = this.ChaikaSearch.getPlugin(aID);
                    let term = aTerm;

                    if(plugin.charset.toUpperCase() !== 'UTF-8'){
                        let converter = Cc["@mozilla.org/intl/scriptableunicodeconverter"].getService(Ci.nsIScriptableUnicodeConverter);
                        converter.charset = plugin.charset;
                        term = escape(converter.ConvertFromUnicode(aTerm));
                    }

                    let searchURI = Services.io.newURI(plugin.url.replace('%%TERM%%', term), null, null);
                    this.ChaikaCore.browser.openURL(searchURI, aAddTab);
                }else{
                    const SIDEBAR_URL = 'chrome://chaika/content/bbsmenu/page.xul';
                    var sidebarBox = document.getElementById("sidebar-box");
                    var sidebar = document.getElementById("sidebar");

                    function _doSearch(){
                        setTimeout(function(){
                            var sideDoc = sidebar.contentDocument;
                            var sideWin = sidebar.contentWindow;
                            var searchBox = sideDoc.getElementById("searchBox");

                            searchBox.focus();
                            searchBox.value = aTerm;

                            sideWin.Page.search(aTerm, aID);

                            sidebar.removeEventListener('DOMContentLoaded', _doSearch, false);
                        }, 0);
                    }

                    if(sidebarBox.hidden || sidebar.getAttribute('src') !== SIDEBAR_URL){
                        sidebar.addEventListener("DOMContentLoaded", _doSearch, false);
                        SidebarUI.show("viewChaikaSidebar");
                    }else{
                        _doSearch();
                    }
                }
            ]]></body>
        </method>


        <!--
        /**
         * 板一覧で検索する
         * @param {String} aTerm 検索文字列
         * @param {Boolean} aAddTab 新規タブに開くかどうか
         */
        -->
        <method name="searchInBoard">
            <parameter name="aTerm" />
            <parameter name="aAddTab" />
            <body><![CDATA[
                var boardURL = this._getCurrentBoardURL();
                if(!boardURL) return;

                var params = new URL(boardURL.spec).searchParams;

                params.set('query', aTerm);

                var searchURL = Services.io.newURI(boardURL.spec + '?' + params, null, null);

                this.ChaikaCore.browser.openBoard(searchURL, aAddTab);
            ]]></body>
        </method>


        <!--
        /**
         * スレッド内で検索する
         * @note 本来ならスキンの検索機能を呼び出したいが、仕様が固まっておらず困難
         */
        -->
        <method name="searchInThread">
            <parameter name="aTerm" />
            <body><![CDATA[
                //今のところ標準の検索バーを出して検索するだけ
                gFindBar.onFindCommand();
                gFindBar._findField.value = aTerm;
                gFindBar._find();
            ]]></body>
        </method>


        <!--
        /**
         * 書き込みウィザードを開く
         */
        -->
        <method name="write">
            <body><![CDATA[
                let threadURL = this._getCurrentThreadURL();
                if(!threadURL) return;

                let threadPlainURL = (new this.ChaikaThread(threadURL)).plainURL;

                this.ChaikaCore.browser.openWindow(
                    "chrome://chaika/content/post/wizard.xul",
                    null,
                    threadPlainURL.spec
                );
            ]]></body>
        </method>


        <!--
        /**
         * ログを削除する
         */
        -->
        <method name="deleteLog">
            <body><![CDATA[
                var threadURL = this._getCurrentThreadURL();
                if(!threadURL) return;

                if(this.ChaikaCore.pref.getBool("warn_when_delete_log")){
                    var result = Services.prompt.confirm(null, "ログの削除 [chaika]",
                                    "このスレッドのログを削除しますか?");
                    if(!result) return;
                }

                try{
                    var thread = new this.ChaikaThread(threadURL);
                    thread.deleteThreadData();
                }catch(ex){
                    this.ChaikaCore.logger.error(ex);
                }
            ]]></body>
        </method>


        <!--
        /**
         * chaika で開く
         * @param {nsIURI} [aURI] 開くURL 省略時は現在開いているスレッドまたは板になる
         * @param {Boolean} [aAddTab=false] 新規タブで開くかどうか
         * @param {Boolean} [disregardLimit=false] 表示制限を置き換えるかどうか
         */
        -->
        <method name="viewInChaika">
            <parameter name="aURI"/>
            <parameter name="aAddTab"/>
            <parameter name="disregardLimit"/>
            <body><![CDATA[
                var url = aURI ||
                          this._getCurrentThreadURL() ||
                          this._getCurrentBoardURL();

                if(!url) return;

                try{
                    if(this.URLUtils.isBoard(url.spec)){
                        this.ChaikaCore.browser.openBoard(url, aAddTab);
                    }else{
                        this.ChaikaCore.browser.openThread(url, aAddTab, disregardLimit, false);
                    }
                }catch(ex){
                    this.ChaikaCore.logger.error(ex);
                    return;
                }
            ]]></body>
        </method>


        <!--
        /**
         * ブラウザで開く
         * @param {nsIURI} [aURI] 開くURL 省略時は現在開いているスレッドまたは板になる
         * @param {Boolean} [aAddTab=false] 新規タブで開くかどうか
         * @param {Boolean} [disregardLimit] 表示制限を書き換えて開くかどうか
         */
        -->
        <method name="viewInBrowser">
            <parameter name="aURI"/>
            <parameter name="aAddTab"/>
            <parameter name="disregardLimit" />
            <body><![CDATA[
                var url = aURI ||
                          this._getCurrentThreadURL() ||
                          this._getCurrentBoardURL();

                if(!url) return;

                this.ChaikaCore.browser.openThread(url, aAddTab, disregardLimit, true);
            ]]></body>
        </method>


        <!--
        /**
         * スレッドの表示オプションを変更する
         * @param {String} aOption 表示オプション "l30", "45-", ""(すべて表示) など
         * @param {Boolean} [aAddTab=false] 新規タブで開くかどうか
         */
        -->
        <method name="changeLimit">
            <parameter name="aOption"/>
            <parameter name="aAddTab"/>
            <body><![CDATA[
                let threadURL = this._getCurrentThreadURL();

                if(!threadURL) return;

                let currentURL = gBrowser.currentURI;

                try{
                    let threadPlainURL = (new this.ChaikaThread(threadURL)).plainURL;

                    threadURL = Services.io.newURI('./' + aOption, null, threadPlainURL);
                    this.ChaikaCore.browser.openThread(threadURL, aAddTab, false,
                                                       !this.URLUtils.isChaikafied(currentURL.spec));
                }catch(ex){
                    this.ChaikaCore.logger.error(ex);
                }
            ]]></body>
        </method>


        <!--
        /**
         * 板を開く
         * @param {Boolean} [aAddTab=false] 新規タブで開くかどうか
         */
        -->
        <method name="goToBoard">
            <parameter name="aAddTab"/>
            <body><![CDATA[
                let boardURL = this._getCurrentBoardURL();

                if(boardURL){
                    let currentURI = gBrowser.currentURI;

                    if(this.URLUtils.isChaikafied(currentURI.spec)){
                        this.ChaikaCore.browser.openBoard(boardURL, aAddTab);
                    }else{
                        this.ChaikaCore.browser.openURL(boardURL, aAddTab);
                    }
                }
            ]]></body>
        </method>


        <!--
        /**
         * 次のスレッドを検索する
         * FoxAge2ch がインストールされている時は FoxAge2ch の次スレ検索機能を呼び出す
         * ない場合は板一覧でスレタイを用いて検索をする
         * @param {Boolean} [aAddTab=false] 板一覧で検索する場合に新規タブで開くかどうか
         */
        -->
        <method name="findNextThread">
            <parameter name="aAddTab" />
            <body><![CDATA[
                const FOX_AGE_2CH = !!document.getElementById("viewFoxAge2chSidebar");

                var threadURI = this._getCurrentThreadURL();
                if(!threadURI) return;

                //FoxAge2chがインストールされている場合は
                //FoxAge2chの次スレ検索機能の使用を試みる
                if(FOX_AGE_2CH){
                    //FoxAge2chに登録されている場合のみ次スレ検索が可能
                    let FoxAge2chUtils = (Components.utils.import("resource://foxage2ch/utils.jsm", {})).FoxAge2chUtils;
                    let [boardID, threadID] = FoxAge2chUtils.parseFromURL(threadURI.spec);
                    let item = FoxAge2chUtils.service.getItem(threadID);

                    if(item){
                        this.ChaikaCore.browser.openWindow(
                            "chrome://foxage2ch/content/findThread.xul",
                            "FoxAge2ch:FindThread",
                            threadID
                        );
                        return;
                    }
                }

                //FoxAge2chがインストールされていない場合および
                //FoxAge2chに未登録のスレッドの場合は
                //chaika の検索機能を使用する

                //検索文字列
                let query = (new this.ChaikaThread(threadURI)).title;

                //最も後ろの数字がある場所を探索する
                //String#lastIndexOfには正規表現が渡せないため、
                //reverseしてからsearchを用いる
                let index = query.split('').reverse().join('').search(/\d+/);

                //もし中間よりも後に数字が存在した場合、それより後ろをカットする
                if(index !== -1 && (index + 1) < (query.length / 2)){
                    query = query.replace(/^(.*?)\d+\D*$/, '$1');
                }

                //検索文字列を設定して板を開く
                let boardURL = this._getCurrentBoardURL();
                let params = new URL(boardURL.spec).searchParams;

                params.set('query', query);

                let searchURL = Services.io.newURI(boardURL.spec + '?' + params, null, null);

                this.ChaikaCore.browser.openBoard(searchURL, aAddTab);
            ]]></body>
        </method>


        <!--
        /**
         * AA として文字列を登録する
         * @param {String} aaStr 追加する AA 文字列
         */
        -->
        <method name="registerAsAA">
            <parameter name="aaStr" />
            <body><![CDATA[
                this.ChaikaCore.browser.openWindow(
                    "chrome://chaika/content/settings/aa-manager.xul",
                    null,
                    aaStr
                );
            ]]></body>
        </method>


        <!--
        /**
         * 置換マネージャを開く
         */
        -->
        <method name="openReplacementManager">
            <body><![CDATA[
                this.ChaikaCore.browser.openWindow("chrome://chaika/content/settings/replacement-manager.xul");
            ]]></body>
        </method>


        <!--
        /**
         * 設定画面を開く
         */
        -->
        <method name="openSettings">
            <body><![CDATA[
                this.ChaikaCore.browser.openWindow(
                    "chrome://chaika/content/settings/settings.xul",
                    "chaika:settings"
                );
            ]]></body>
        </method>
    </implementation>
</binding>

</bindings>
