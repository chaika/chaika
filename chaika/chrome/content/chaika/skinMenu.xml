<?xml version="1.0"?>

<!-- See license.txt for terms of usage -->

<bindings id="skinMenuBindings"
        xmlns="http://www.mozilla.org/xbl"
        xmlns:xbl="http://www.mozilla.org/xbl"
        xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">

<binding id="skinMenuPopup" extends="chrome://global/content/bindings/popup.xml#popup">

    <handlers>
        <handler event="popupshowing" action="this._onPopupShowing(event)" />
        <handler event="command" action="this._doCommand(event)"/>
    </handlers>

    <implementation>
        <constructor><![CDATA[
            Components.utils.import("resource://chaika-modules/ChaikaCore.js", this);
            Components.utils.import('resource://chaika-modules/utils/Browser.js', this);

            //読み込み時にメニューを構築しておかないと、
            //設定画面のmenulistが初期状態で空になってしまう
            this._initMenu();
        ]]></constructor>

        <method name="_onPopupShowing">
            <parameter name="aEvent" />
            <body><![CDATA[
                this._initMenu();
            ]]></body>
        </method>

        <method name="_doCommand">
            <parameter name="aEvent" />
            <body><![CDATA[
                let targetElement = aEvent.originalTarget;
                let anonymousID = targetElement.getAttribute("anonid");

                switch(anonymousID){
                    case 'open-skin-folder':
                        this._openSkinFolder();
                        break;

                    default:
                        this._setSkin(targetElement.getAttribute('value'));
                }
            ]]></body>
        </method>


        <method name="_initMenu">
            <body><![CDATA[
                this._destroyMenu();

                var skinMenu = this.parentNode;

                //デフォルトスキン
                var defaultItem = skinMenu.appendItem('(Default)', '');
                defaultItem.setAttribute('type', 'radio');

                //セパレータ
                var sep1 = document.createElement('menuseparator');
                skinMenu.menupopup.appendChild(sep1);

                //その他のスキン
                var skinDir = this.ChaikaCore.getDataDir();
                skinDir.appendRelativePath("skin");

                if(!skinDir.exists()){
                    skinDir.create(Components.interfaces.nsIFile.DIRECTORY_TYPE, 0755);
                }

                let entries = skinDir.directoryEntries.QueryInterface(Components.interfaces.nsIDirectoryEnumerator);
                let entry;

                while(entry = entries.nextFile){
                    if(entry.isDirectory()){
                        let item = skinMenu.appendItem(entry.leafName, entry.leafName);
                        item.setAttribute('class', 'chaika-thirdparty-skin');
                        item.setAttribute('type', 'radio');
                    }
                }

                entries.close();

                //セパレータ
                if(skinMenu.getElementsByClassName('chaika-thirdparty-skin').length > 0){
                    let sep2 = document.createElement('menuseparator');
                    skinMenu.menupopup.appendChild(sep2);
                }

                //スキンフォルダを開く
                var folderOpenItem = skinMenu.appendItem('スキンフォルダを開く...', '');
                folderOpenItem.setAttribute('anonid', 'open-skin-folder');


                //現在設定されているスキンを選択状態にする
                var currentSkinName = this.ChaikaCore.pref.getUniChar('thread_skin');
                var currentSkinItem = skinMenu.querySelector('menuitem[value="' + currentSkinName + '"]');
                if(currentSkinItem){
                    currentSkinItem.setAttribute('checked', 'true');
                    skinMenu.selectedItem = currentSkinItem;
                }
            ]]></body>
        </method>


        <method name="_destroyMenu">
            <body><![CDATA[
                while(this.hasChildNodes()){
                    this.removeChild(this.firstChild);
                }
            ]]></body>
        </method>


        <method name="_openSkinFolder">
            <body><![CDATA[
                var skinDir = this.ChaikaCore.getDataDir();
                skinDir.appendRelativePath("skin");

                this.ChaikaCore.io.reveal(skinDir);
            ]]></body>
        </method>


        <method name="_setSkin">
            <parameter name="aSkinName" />
            <body><![CDATA[
                this.ChaikaCore.pref.setUniChar('thread_skin', aSkinName);

                if(this.ChaikaCore.pref.getBool('browser.browsermenu.reload_when_skin_changed')){
                    this.Browser.getGlobalMessageManager().broadcastAsyncMessage(
                        'chaika-skin-changed', { name: aSkinName }
                    );
                }
            ]]></body>
        </method>

    </implementation>

</binding>
</bindings>
